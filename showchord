#!/usr/bin/python

'''################################################################
(c) Alain Cherpin - alain.cherpin@gmail.com

Released under GNU GENERAL PUBLIC LICENSE, Version 3, 29 June 2007

Given a sequence of music notes, draw a piano keyboard
with marks on the corresponding keys

The note sequence must be from low to high (left to right)
The chord name may be provided to be printed above the keyboard
Note names may be printed below the keyboard

Synopsis:
showchord [-h] [--keyprint] [--fileprefix FILEPREFIX] [--export]
                 [--zoom ZOOM] ['C E G B;Cmaj7' '' 'a c# e g#;Amaj7']

Three examples giving the same result:

# chords given at command line
showchord -k -e -z 3 'C E G B;Cmaj7' '' 'a c# e g#;Amaj7'

# chords given from a pipe stream
echo 'C E G B;Cmaj7' '' 'a c# e g#;Amaj7' | showchord -k -e -z 3

# chords provided from a file stream
cat >chords.lst<<EOF
C E G B;Cmaj7

a c# e g#;Amaj7
EOF

showchord -k -e -z 3 < chords.lst

$ showchord -e -k -z 3
'C E G;C'
'a c# e g#;Amaj7'
''
';Dmin7'
^C

if no chord is given, then switches to stream mode and waits for 
input from stdin

NOTE: chords as arguments override any stream input, i.e: stream
input is switched on only if no chord is provided as arguments

requirements:
 linux like OS
 python2+
 inkscape 0.92+ (export function)
##################################################################'''


## module import

# required to use print(string, file=sys.stdout) in python 2
from __future__ import print_function

import os, sys, subprocess
import argparse
from collections import namedtuple

# for input from musicxml files
import xml.etree.ElementTree as ET

## constants
VERSION = '0.7.3'

'''
TODO:
fix key repeat not at the right place (no scale change)
ex of test in error:
showchord 'C C# D Eb E F Gb G G# A# B Bbb C D E F G A B' -k -z 3 
'''


# key border thickness
STROKE_WIDTH = 3.0

WTE_TYPE = 0
WTE_WIDTH = 23
WTE_HEIGHT = 150
WTE_RX = 3
WTE_RY = 3
WTE_INIT_OFFSET = 0
WTE_COLOR = '#ffffff'
WTE_STROKE_COLOR = '#000000'
WTE_OPACITY = 1
WTE_MARK_V_OFFSET = (WTE_HEIGHT / 1.2)
WTE_MARK_COLOR = '#000000'

BLK_TYPE = 1
BLK_SHIFT = 3     # specific black key shift value from white position
BLK_WIDTH = 13
BLK_HEIGHT = 100
BLK_RX = 1
BLK_RY = 1
BLK_INIT_OFFSET = (WTE_WIDTH - (BLK_WIDTH / 2) - 0.5) # offset for 1st in a scale
BLK_COLOR = '#000000'
BLK_STROKE_COLOR = '#DDDDFF'
BLK_OPACITY = 1
BLK_MARK_V_OFFSET = (BLK_HEIGHT / 1.4)
BLK_MARK_COLOR = '#ffffff'


OUTPUT = sys.stdout
SVG_ID = 'chords'
HEIGHT_TITLE = 20
HEIGHT_PRINTKEY = 15
CHORD_Y_SHIFT = 20
MARK_RADIUS = 5

# first octave if notes do not contain oct. info
DEFAULT_OCTAVE = 4

EXPORT_CMD = {'inkscape': ' -D -f {} -e {} >/dev/null',
              'rsvg-convert': ' {} -o {} -a >/dev/null'}

export_cmd = ''

## variables fed from arguments

# print note name under marked key
keyprint = False

# export to PNG
export = False

# file prefix to compose output file
fileprefix = 'chord_'

# free space above keyboard to print title
height_title = 0

# free space below keyboard to print note names
height_keyprint = 0

# zoom value
zoom = 1

# full 88 piano keyboard switch
# autosized when false
kbd88 = False

# 35 representable notes on a single scale with
# their index on the scale
NOTES = {'Cbb' : 10,
         'Cb': 11,
         'C' : 0,
         'C#': 1,
         'Cx': 2,
         'Dbb': 0,
         'Db': 1,
         'D' : 2,
         'D#' : 3,
         'Dx' : 4,
         'Ebb': 2,
         'Eb': 3,
         'E': 4,
         'E#': 5,
         'Ex': 6,
         'Fbb': 3,
         'Fb': 4,
         'F': 5,
         'F#': 6,
         'Fx': 7,
         'Gbb': 5,
         'Gb': 6,
         'G': 7,
         'G#': 8,
         'Gx': 9,
         'Abb': 7,
         'Ab': 8,
         'A': 9,
         'A#': 10,
         'Ax': 11,
         'Bbb': 9,
         'Bb': 10,
         'B': 11,
         'B#': 0,
         'Bx': 1}

'''Note in an octave
   a note is a couple of the form ['note_name', octave]
   note_name is used to name the note and to 
   place it in a single scale via the index found in NOTES
   octave is used to tell witch scale to address,
   from 0 (lowest A) to 8 (highest C) on an 88 piano keyboard'''
note = []

'''list of chords of the forme 'N N N N;Title'
   where N is a note ['note_name', octave]
   and title is a string
   chords data are provided via command line arguments or
   via input stream'''
chords = []


###########################
# define a note representation

# key dimensions
KeyDim = namedtuple('KeyDim', ['width', 'height'])

# key appearence
KeyApp = namedtuple('KeyApp', ['color', 'stroke_color', 'rx', 'ry', 'fill_opacity'])

# key mark spec
KeyMark = namedtuple('KeyMark', ['color', 'v_offset'])

# key type (black or white)
KeyType = namedtuple('NteType', ['type', 'h_init_offset', 'dim', 'app', 'mark'])

# 2 types of keys
## white
wte_dim = KeyDim(WTE_WIDTH, WTE_HEIGHT)
wte_app = KeyApp(WTE_COLOR, WTE_STROKE_COLOR, WTE_RX, WTE_RY, WTE_OPACITY)
wte_mark = KeyMark(WTE_MARK_COLOR, WTE_MARK_V_OFFSET)
white = KeyType(1, WTE_INIT_OFFSET, wte_dim, wte_app, wte_mark)

## black
blk_dim = KeyDim(BLK_WIDTH, BLK_HEIGHT)
blk_app = KeyApp(BLK_COLOR, BLK_STROKE_COLOR, BLK_RX, BLK_RY, BLK_OPACITY)
blk_mark = KeyMark(BLK_MARK_COLOR, BLK_MARK_V_OFFSET)
black = KeyType(0, BLK_INIT_OFFSET, blk_dim, blk_app, blk_mark)

# note lists for drawing keyboard
KEYS = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']

# 12 notes representation by id, ordered from their
# position on the piano keyboard
# First field is the white note index
# Second field is the shift direction -1:left, 0:center, 1:right
# white or black are structure containing drawing information
# Fourth field is the value of shift direction
NOTES_REPR = []
NOTES_REPR.append([0,  0, white,  0])	    # 0  : C
NOTES_REPR.append([0, -1, black,  0.85])    # 1  : C#
NOTES_REPR.append([1,  0, white,  0]) 	    # 2  : D
NOTES_REPR.append([1,  1, black,  0.85])    # 3  : D#
NOTES_REPR.append([2,  0, white,  0])	    # 4  : E
NOTES_REPR.append([3,  0, white,  0])	    # 5  : F
NOTES_REPR.append([3, -1, black,  1])	    # 6  : F#
NOTES_REPR.append([4,  0, white,  0])	    # 7  : G
NOTES_REPR.append([4,  0, black,  0])	    # 8  : G#
NOTES_REPR.append([5,  0, white,  0])	    # 9  : A
NOTES_REPR.append([5,  1, black,  1])	    # 10 : A#
NOTES_REPR.append([6,  0, white,  0])	    # 11 : B

###############################################
# functions
###############################################

###############################################
# command line arguments
def args():
    global chords
    global keyprint
    global height_keyprint
    global export
    global fileprefix
    global zoom
    global kbd88

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='''
Show chord notes on a piano keyboard, output each chord on a SVG image
- Authorized note names are:
  C D E F G A B
- Accidentals are:
  # (sharp/dieze)
  b (flat/bemol)
  x (## double sharp / double dieze)
  bb (double flat / double bemol)
- Octave value is optional after note name

  e.g: "C Eb Gb Bbb;Cdim7" "C E G;C major" "C5 Eb5 Gb5 Bbb5;Cdim7 - 5th octv"

- Stream input from CSV file with the same format (without quotes):
  C Eb Gb Bbb;Cdim7
  C E G;C major
  D F# A;D

  showchord [OPTIONS] < chord_list.csv
    OR
  cat chord_list.csv | showchord [OPTIONS]

- Stream input from MusicXML format''')

    # optional list of chords
    # if no chord provided then enter in stream mode
    # chords is a list of chords of the form 'N N N;chord title'
    # ex: 'D F# A;D major' 'e g# B;E' 'E A b c'
    parser.add_argument('chords',
	nargs='*',
	help='Notes of the chord, followed or not by chord name. Ex. "C Eb Gb Bbb;Cdim7" "C3 E4 G5"')

    # print note name below each marked key
    parser.add_argument('--keyprint', '-k',
	action='store_true',
	help='Print note key names below the keyboard')

    # set prefix for automatic file name
    parser.add_argument('--fileprefix', '-f',
	action='store',
	help='File prefix for auto-generated SVG filenames')

    # export to PNG image file format
    parser.add_argument('--export', '-e',
	action='store_true',
	help='Export to PNG file')

    # zoom output SVG image (and PNG if --export is set)
    parser.add_argument('--zoom', '-z',
	type=float,
	action='store',
	help='Zoom value (float), e.g: 2.0 to double output SVG drawing size')

    # full 88 notes common piano keyboard
    parser.add_argument('--piano', '-p',
	action='store_true',
	help='Piano keyboard mode - full 88 keyboard from A0 to C8')

    # parse command line and set args.<option> values
    args = parser.parse_args()

    # store provided chords in chords list
    for chord in args.chords:
        chords.append(chord)

    # store keyprint choice, if true set height of note name space
    keyprint = args.keyprint
    if keyprint:
        height_keyprint = HEIGHT_PRINTKEY

    # override default fileprefix
    if args.fileprefix:
        fileprefix = args.fileprefix

    # store export choice
    export = args.export

    # store zoom factor
    if args.zoom:
        zoom = args.zoom

    # store full 88 notes keyboard choice
    kbd88 = args.piano

###############################################
# print begining of svg file
def svg_open(title, height_kprint, num_white_keys):
    svg_header = '''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   id="chords"
   version="1.1"
   preserveAspectRatio="xMinYMin meet"
   viewBox="{} {} {} {}"
   width="{}"
   height="{}">'''

    height = HEIGHT_TITLE
    if title == '': height = 0
    vbox_x = 0
    vbox_y = 0
    vbox_width = (num_white_keys * WTE_WIDTH + 2) * zoom
    #vbox_heigth = (30 + height) * zoom
    vbox_heigth = (STROKE_WIDTH + WTE_HEIGHT + height + height_kprint) * zoom
    width = vbox_width
    #height = (42 + height + height_kprint) * zoom
    height = vbox_heigth
    return svg_header.format(vbox_x,
                             vbox_y,
                             vbox_width,
                             vbox_heigth,
                             width,
                             height)

###############################################
# print svg group open
def svg_g_open(title, num_white_keys):
    ret = ''
    x_translate = 1
    y_translate = 1
    if title != '':
        y_translate = CHORD_Y_SHIFT * zoom
        ret += svg_draw_title(title, num_white_keys)

    svg_group = '''  <g
    transform="translate({},{})"
    id="chord{}">'''

    return ret + svg_group.format(x_translate,
                                  y_translate,
                                  title)

###############################################
# print svg group end
def svg_g_close():
    return '</g>'

###############################################
# print svg file end
def svg_close():
    return '</svg>'

###############################################
# draw the given key as svg rectangle
def svg_draw_key(octave_shift, notename, color, v_shift):

    # retrieve key structure from notename
    key = NOTES_REPR[NOTES[notename]]

    COLOR = key[2].app.color
    if color != '' and color != COLOR: COLOR=color

    x = octave_shift + (key[0] * WTE_WIDTH + key[2].h_init_offset + key[1] * key[3] * BLK_SHIFT) * zoom

    # corner round value
    rx = key[2].app.rx * zoom / 1.1
    ry = key[2].app.ry * zoom / 1.5

    stroke_opacity = 0.6

    y = 0

    rb_height = 1
    rb_stroke_width = 1
    rb_color = '#EE0000'
    rb_opacity = 100


    svg_key = '''    <rect
    id="{}"
    width="{}"
    height="{}"
    x="{}"
    y="{}"
    rx="{}"
    ry="{}"
    style="fill:{};fill-opacity:{};stroke:{};stroke-width:{};stroke-opacity:{}"
    />
   <!-- red key bushing cloth --> 
        <rect
    id="{}"
    width="{}"
    height="{}"
    x="{}"
    y="{}"
    style="fill:{};fill-opacity:{};stroke:{};stroke-width:{};stroke-opacity:{}"
    />
    '''
    return svg_key.format(notename,
                          key[2].dim.width * zoom,
                          key[2].dim.height * zoom,
                          x,
                          v_shift * zoom,
                          rx,
                          ry,
                          COLOR,
                          key[2].app.fill_opacity,
                          key[2].app.stroke_color,
                          STROKE_WIDTH * zoom / 3,
                          stroke_opacity,
                          "rb_" + notename,
                          key[2].dim.width * zoom,
                          rb_height,
                          x,
                          v_shift * zoom,
                          rb_color,
                          rb_opacity,
                          rb_color,
                          rb_stroke_width,
                          rb_opacity
                          )

##############################################
# draw a mark on the given note as svg circle
def svg_draw_mark(octave_shift, notename):

    # delta value to correct mark position for black keys only
    delta = 0.5

    # retrieve key structure from notename
    key = NOTES_REPR[NOTES[notename]]

    r_value = MARK_RADIUS * zoom
    cx = octave_shift + (key[0] * WTE_WIDTH + key[2].h_init_offset + key[2].dim.width / 2 + key[1] * key[3] * BLK_SHIFT + delta) * zoom
    cy = key[2].mark.v_offset * zoom
    svg_mark = '''  <circle
  id="mark_{}"
  r="{}"
  cx="{}"
  cy="{}"
  style="fill:{};fill-opacity:1;stroke-width:0.38909313"
  />'''

    return svg_mark.format(notename,
                           r_value,
                           cx,
                           cy,
                           key[2].mark.color)

###############################################
def svg_draw_keyname(octave_shift, notename):

    # retrieve key structure from notename
    key = NOTES_REPR[NOTES[notename]]

    font_size = 0.6 * zoom

#    x = octave_shift + (key[0] * WTE_WIDTH + key[2].h_init_offset + key[1] * key[3] * BLK_SHIFT + key[2].type * (key[2].dim.width - len(notename) * 6) / 2) * zoom
    x = octave_shift + (key[0] * WTE_WIDTH + key[2].h_init_offset + key[1] * key[3] * BLK_SHIFT + 2 + key[2].type * (key[2].dim.width - len(notename) * 6 - 3) / 2) * zoom

    y = (key[2].mark.v_offset + 15) * zoom
    line_height = font_size * zoom

    keyname = '''  <text
     id="key_{}"
     y="{}"
     x="{}"
     style="font-style:normal;font-weight:bold;font-size:{}em;line-height:{};font-family:monospace;letter-spacing:0px;word-spacing:0px;fill:{};fill-opacity:1;stroke:{};stroke-width:{}"
     xml:space="preserve"><tspan
       id="tspan_{}">{}</tspan>
  </text>'''
    return keyname.format(notename,
                          y,
                          x,
                          font_size,
                          line_height,
                          key[2].mark.color,
                          key[2].mark.color,
                          0,
                          notename,
                          notename)

###############################################
# draw chord name as svg text
def svg_draw_title(title, num_white_keys):
    y = 14 * zoom
    x = ((num_white_keys * WTE_WIDTH - (len(title) * 8)) / 2) * zoom
    font_size = 0.8 * zoom
    line_height = 1.25 * zoom
    svg_title = '''  <text
     id="title_{}"
     y="{}"
     x="{}"
     style="font-style:normal;font-weight:bold;font-size:{}em;line-height:{};font-family:monospace;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.26458332"
     xml:space="preserve"><tspan
       id="tspanTITLE">{}</tspan>
  </text>'''

    return svg_title.format(title,
                            y,
                            x,
                            font_size,
                            line_height,
                            title)


###############################################
# extract key lists from a full scale
# for drawing purpose
def whites():
    '''
    return white keys list from n_min to n_max
    keys are white if there name does not contain #
    '''
    return [note for note in KEYS if note[-1:] != '#']

def whites_sub(nte_min, nte_max):
    '''
    return white keys list from n_min to n_max
    keys are white if there name does not contain #
    '''
    return [note for note in KEYS if note[-1:] != '#'
        and KEYS.index(note) >= KEYS.index(nte_min)
        and KEYS.index(note) <= KEYS.index(nte_max)]

def blacks():
    '''
    return white keys list from n_min to n_max
    keys are white if there name does not contain #
    '''
    return [note for note in KEYS if note[-1:] == '#']

def blacks_sub(nte_min, nte_max):
    '''
    return white keys list from n_min to n_max
    keys are white if there name does not contain #
    '''
    return [note for note in KEYS if note[-1:] == '#'
        and KEYS.index(note) >= KEYS.index(nte_min)
        and KEYS.index(note) <= KEYS.index(nte_max)]

###############################################
# draw a whole set of keys of a certain octave
# return the corresponding svg code
def draw_keys(octv_shift, keys, color, v_shift):
    kbd_part = ''
    for note in keys:
        kbd_part += svg_draw_key(octv_shift, note, color, v_shift)

    return kbd_part

###############################################
# draw a keyboard of arbitrary size
def draw_svg_kbd(note_min, octave_min, note_max, octave_max):
    kbd = ''

    OCTV_MIN = octave_min + 1
    OCTV_MAX = octave_max

    # set first octave scale
    wht_first = whites_sub(note_min,'B')
    blk_first = blacks_sub(note_min,'B')

    # set last octave scale
    wht_last = whites_sub('C', note_max)
    blk_last = blacks_sub('C', note_max)

    # draw the keyboard in 3 parts
    base_shift = WTE_WIDTH * zoom

    # lowest octave - may be reduced
    o_shift = -((7 - len(wht_first)) * base_shift)
    kbd += draw_keys(o_shift, wht_first, '', 0)
    kbd += draw_keys(o_shift, blk_first, '', 0)

    # shift of the lowest part
    shift = len(wht_first) * base_shift
    o_shift = shift

    # intermediary (full) octaves
    for octv in range(1, octave_max - octave_min):
        kbd += draw_keys(o_shift, whites(), '', 0)
        kbd += draw_keys(o_shift, blacks(), '', 0)
        o_shift = octv * 7 * base_shift + shift

    # higher octave - may be reduced
    kbd += draw_keys(o_shift, wht_last, '', 0)
    kbd += draw_keys(o_shift, blk_last, '', 0)

    return kbd

###############################################
def svg_draw_chord(chord, title, lowest_note, highest_note, num_white_keys):

    svg_chord = svg_g_open(title, num_white_keys)

    # draw a keyboard with as many octaves as given
    # by the lowest_note and highest_note bounds
    svg_chord += draw_svg_kbd(lowest_note[0],
                              int(lowest_note[1]),
                              highest_note[0],
                              int(highest_note[1]))

    # empty chord: close group tag and return
    # an empty keyboard (no mark on it)
    if not chord:
        svg_chord += svg_g_close()
        return svg_chord

    # width of a zoomed white note
    wht_width = WTE_WIDTH * zoom

    # count white notes in lower octave scale
    lower_num_wht = len(whites_sub(lowest_note[0], 'B'))

    # left shift value for missing notes of the lower scale
    shift = -((7 - lower_num_wht) * wht_width)

    ## draw a mark on the keys of the given chord
    #  and the note name if keyprint is set
    o_shift = 0
    key_idx = 0

    lowest_octv = int(lowest_note[1])
    for note in chord:
        o_shift = (int(note[1]) - lowest_octv) * 7 * wht_width + shift
        svg_chord += svg_draw_mark(o_shift, note[0])
        if keyprint:
            svg_chord += svg_draw_keyname(o_shift, note[0])

    svg_chord += svg_g_close()
    return svg_chord

###############################################
# draw all chords
# chords: [chord, title, h_kprint]
def draw_chords(chords, lowest_note, highest_note):

    if len(lowest_note) == 0: lowest_note = ['C', 4]
    if len(highest_note) == 0: highest_note = ['B', 5]

    # if bounds are not of an 88 piano keyboard
    # then draw full scale in octave 0 or 8
    if lowest_note[1] == 0:
        if lowest_note[0] != 'A': lowest_note[0] = 'C'
    else:
        lowest_note[0] = 'C'

    if highest_note[1] == 8:
        if highest_note[0] != 'C': highest_note[0] = 'B'
    else:
        # upper octave index < 8 then draw a full scale
        highest_note[0] = 'B'

    # count the number of white key to adjust svg width
    num_white_keys = len(whites_sub(lowest_note[0], 'B'))

    for octv in range(lowest_note[1] + 1, highest_note[1]):
        num_white_keys += 7

    num_white_keys += len(whites_sub('C', highest_note[0]))

    svg_content = ''
    svg_chords = []
    # index is used as an id for similary filenames
    index = 0

    # create svg content for each chords
    for c in chords:

        chord = c[0]
        title = c[1]
        h_kprint = c[2]

        # create svg content from chord, title and h_kprint
        svg_content = svg_open(title, h_kprint, num_white_keys)
        svg_content += svg_draw_chord(chord,
                                      title,
                                      lowest_note,
                                      highest_note,
                                      num_white_keys)
        svg_content += svg_close()

        # create output filename from title
        svg_filename = ''
        if title and title != ' ':
            svg_filename = fileprefix + title + '_' + '{:03d}'.format(index)
        else:
            svg_filename = fileprefix + '{:03d}'.format(index)

        index += 1

        # cleanup filename and set the correct extension
        svg_filename = set_extension(sanitize(svg_filename), '.svg')

        svg_chords.append([svg_content, svg_filename])

    return svg_chords

###############################################
# cleanup name to be OS compatible
def sanitize(name):
    tmp = name.replace("_ ", "_")
    tmp = tmp.replace(" ", "_")
    tmp = tmp.replace("#","s")
    tmp = tmp.replace("/","")
    tmp = tmp.replace("__","_")
    tmp = tmp.replace("--","-")
    return tmp

###############################################
# add or replace filename extension
# return name with the given extension
def set_extension(name, ext):
    if name == '':
        return name

    tmplist = name.split(ext)

    # remove extension if present
    if len(tmplist) > 1:
        del tmplist[len(tmplist) - 1]

    # recompose original name without original ext
    # and add the given extension
    return '.'.join(tmplist) + ext


###############################################
# check if external cmd exists and is executable on OS
# return command full name on success
# or empty string on failed search
def export_cmd_fullname(cmd):
    for path in os.environ["PATH"].split(os.pathsep):
        if os.access(os.path.join(path, cmd), os.X_OK):
            return os.path.join(path, cmd)
    return ''

###############################################
# return full shell svg-to-png like command
# expression made out of EXPORT_CMD dictionary
# content
# return an empty string if no commands are
# found on the OS
def export_cmd_expr():
    cmds = EXPORT_CMD.keys()
    cmds.sort()
    for cmd in cmds:
        cmd_name = export_cmd_fullname(cmd)
        if not cmd_name:
            continue
        return cmd + EXPORT_CMD[cmd]

    return ''

###############################################
# export to PNG
# export: boolean
# files: [[filename],
#         [filename],
#         ..]
def png_export(export, files):

    # only export if export == True
    if not export: return None

    # set export command depending on what's installed on system
    export_cmd = export_cmd_expr()

    if export_cmd != '':
        for f in files:
            pngname = f.replace('.svg', '.png')

            # export_cmd expression must contain exactely 2 pairs of empty
            # braces ...{}...{}... to be filled with svg_name and export_fname
            subprocess.call(export_cmd.format(f, pngname), shell=True)
    else:
        # TODO: raise an exception instead of printing error message
        print("No export command found in " + str(EXPORT_CMD.keys()),
              file=sys.stderr)

###############################################
# read chords from a musicxml stream
def musicxml_stream(root):
    chord = []
    lines = []

    def alter_text(alter):
        if alter is None: return ''
        if alter.text == '-1': return 'b'
        if alter.text == '-2': return 'bb'
        if alter.text == '1': return '#'
        if alter.text == '2': return 'x'

    # search for chords in each measures
    for m in root.iter('measure'):
        # chord index in the measure
        chord_num = 0

        # find all notes in the measure
        # ignore if no notes found
        notes = m.iter('note')
        if len(list(notes)) <= 1: continue

        title = 'm {:04d}'.format(int(m.get('number')))
        for n in m.iter('note'):
            # if a note is not marked as chord:
            #  increment chord_num
            #  store the current chord and its name
            #  as a new list entry
            #  define a new chord (reset chord)
            if n.find('chord') is None:
                if len(chord) > 1:
                    # we are right after the end of a previous chord
                    chord_num += 1
                    # transform the notes list in a string and add the title
                    # TODO: enhance this useless behaviour
                    lines.append(' '.join(chord) + ';' + title + ' / chord {:02d}'.format(chord_num))
                chord = []

            p = n.find('pitch')
            if p is not None:
                step = p.find('step')
                alter = alter_text(p.find('alter'))
                octave = p.find('octave')
                # store note in a list for simplicity
                chord.append(step.text  + alter + octave.text)

    return lines


###############################################
# read chords from csv-like format
def simple_stream(file_data):
    # draw one chord for each line.
    # line should be of the following form:
    # C E G;C major
    # i.e: 2 parts: chord;title
    lines = []
    data = file_data.split('\n')
    try:
        for line in data:
            # remove trailing '\n'
            line = line.replace('\n', '')

            # ignore commented or empty lines
            if line[0:1] == '#' or line == '':
                continue

            # add line chord[;title] to chords list
            lines.append(line)
    except KeyboardInterrupt:
        return lines
    return lines

###############################################
# read stream from standard input
# TODO: fix it ! Does not work with interactive input
def in_stream():
    # read standard input and store all data in a string
    # first try to transform the stream as an xml tree
    # if it fails with another exception than KeyboardInterrupt
    # then try to load basic specific showchord format

    file_data = sys.stdin.read()
    simple = False

    root = None
    try:
        root = ET.fromstring(file_data)
    except KeyboardInterrupt:
        print('\ntry: ' + sys.argv[0] + ' < file', file=sys.stderr)
        sys.exit(0)
    except:
        # the stream is not valid xml, try simple format
        simple = True
	lines = simple_stream(file_data)

    if simple == True:
        return lines

    return musicxml_stream(root)

###############################################
###############################################
# extract notes from an string representing
# a chord
# 'A#2 Bbb3 C5' -> [('A#',2),('Bbb',3),('C',5)]
# 'A# Bbb C' -> [('A#',4),('Bbb',4),('C',5)]
# 'T C A'       -> None
def str_to_chord(chord_str):
    if chord_str == '': return None

    octv = DEFAULT_OCTAVE
    store_names = []

    # divide a given NoteOctave string notation into
    # ('note', octave) list
    # octave is optional
    # return None if note_string is None or not valid
    def split_note(note_string):
        note_name = ''
        octave = ''

        # ignore empty notes
        if note_string is None: return None

        # separate note name and octave value
        # octave is optional
        if note_string[-1:] in '0123456789':
            # octave value found

            # extract all but the last char
            note_name = note_string[:-1].capitalize()
            # extract the last char stored as number
            octave = int(note_string[-1:])

        else:
            # no octave value found
            note_name = note_string.capitalize()
            octave = octv

        # ignore unknown note
        if note_name not in NOTES: raise NameError(note_name)

        # return a couple of 2 elements
        return [note_name,octave]


    note = []
    chord = []
    for n in chord_str.split():
        # store the note name to increase
        # octave number if note appear more
        # than once
        if n[:-1] in store_names:
            octv += 1
            store_names.append(n[:-1].capitalize())
        try:
            note = split_note(n)
        except NameError:
            raise NameError(n)

        chord.append(note)

    return chord

###############################################
# compare two notes and return the lowest
# reminder: a note is ['name', octave_index]
def lower_note(note_1, note_2):

    if len(note_1) == 0 or len(note_2) == 0:
        return []

    if note_1[1] == '' or note_2[1] == '':
        return []

    # first compare octave
    if note_1[1] < note_2[1]: return note_1
    if note_2[1] < note_1[1]: return note_2

    # same octave then compare note name index
    if NOTES[note_1[0]] <= NOTES[note_2[0]]:
        return note_1

    return note_2

###############################################
# compare two notes and return the highest
def higher_note(note_1, note_2):
    if lower_note(note_1, note_2) == note_1: return note_2
    return note_1

###############################################
# running actions when used interactively
def build_chords():
    # all_chords stores a list of list of chords
    # each entry is [chord, title, svg_content, svg_filename]
    valid_chords = []
    error_chords = []

    # chords is not empty if we reach this point
    first = True
    lowest_note = []
    highest_note = []

    for line in chords:
        chord = []

        # extract chord and title
        parts = line.split(';')

        # note names in a list, first letter uppercase
        # in case of bad input, store an error in a dedicated list
        # instead of the chord
        try:
            chord = str_to_chord(str(parts[0]))
        except NameError as e:
            error_chords.append( 
                '"{}": bad input in "{}" (line ignored)'.format(str(e), str(chord)))
            continue

        # init bounds from the first chord
        # lowerst_note and higher_notes are stored in order
        # to calculate keyboard width
        # notes must contain octave info to be used for comparision
        if chord is not None:
            if first is True:
                # initialisation
                tmp_note = lower_note(chord[0], chord[0])
                if len(tmp_note) > 0: lowest_note = list(tmp_note)

                # NOTE: chord[-1:] is a slice, i.e: [[]]
                tmp_note = lower_note(chord[-1:][0], chord[-1:][0])
                if len(tmp_note) > 0: highest_note = list(tmp_note)

                if len(lowest_note) > 0 and len(highest_note) > 0:
                    first = False
            else:
                tmp_note = lower_note(lowest_note, chord[0])
                # note: list() is used to copy elements instead of object ref
                if len(tmp_note) > 0: lowest_note = list(tmp_note)

                tmp_note = higher_note(highest_note, chord[-1:][0])
                if len(tmp_note) > 0: highest_note = list(tmp_note)


        # if chord empty then reset key print space below keyboard
        # else set user defined choice from --keyprint
        h_kprint = height_keyprint
        if not chord:
            h_kprint = 0

        # store title
        title = ''
        if len(parts) > 1:
            title = parts[1]
            if title == r'\\':
                title = ' '

        valid_chords.append([chord, title, h_kprint])

    return [valid_chords, error_chords, lowest_note, highest_note]

###############################################
# write svg files
# all_chords == [[svg_content, filename],
#                [svg_content, filename],
#                 ..]
def svg_file(all_chords):
    for chord_entry in all_chords:
        with open(chord_entry[1], 'w') as svg_file:
            print(chord_entry[0], file=svg_file)

###############################################
# report errors if present
def report_error(errors):
    if errors: print('Error encountered:')
    for e in errors:
        print(e, file=sys.stderr)

###############################################
# main ########################################
###############################################

# only run on interactive use, not when imported
if __name__ == '__main__':

    # get script options and arguments
    # this may provide chords in chords list
    args()

    ## TODO: FIX IT: DOES NOT PROPERLY WORK !!
    if not chords:
        chords = in_stream()

    [valid_chords, error_chords, lowest_note, highest_note] = build_chords()

    # transform chord datas to svg drawings
    if kbd88:
        lowest_note = ['A', 0]
        highest_note = ['C', 8]

    svg_list = draw_chords(valid_chords, lowest_note, highest_note)

    svg_file(svg_list)

    png_export(export, [f[1] for f in svg_list])
    report_error(error_chords)

    print('Done !\n' + str(len(svg_list)) + ' files created', file=sys.stdout)
    sys.exit(0)
